basic:
https://tinydb.readthedocs.io/en/latest/getting-started.html#basic-usage
advanced:
https://tinydb.readthedocs.io/en/latest/usage.html

from tinydb import TinyDB, Query
db = TinyDB('db.json')

Inserting
db.insert(...)              Insert a document

Getting data
db.all()	                Get all documents
[{'count': 7, 'type': 'apple'}, {'count': 3, 'type': 'peach'}]
iter(db)	                Iter over all documents
>>> for item in db:
>>>     print(item)
{'count': 7, 'type': 'apple'}
{'count': 3, 'type': 'peach'}

Updating
db.update(fields, query)	Update all documents matching the query to contain fields

Removing
db.remove(query)	        Remove all documents matching the query
db.truncate()	            Remove all documents

Querying
Query()	                    Create a new query object
Query().field == 2	        Match any document that has a key field with value == 2 (also possible: !=, >, >=, <, <=)
example::
>>> Fruit = Query()
>>> db.search(Fruit.type == 'peach')
[{'count': 3, 'type': 'peach'}]
>>> db.search(Fruit.count > 5)
[{'count': 7, 'type': 'apple'}]

======================== ADVANCED ============================
Query().field.exists()              Match any document where a field called field exists
Query().field.matches(regex)	    Match any document with the whole field matching the regular expression
Query().field.search(regex)	        Match any document with a substring of the field matching the regular expression
Query().field.test(func, *args)	    Matches any document for which the function returns True
Query().field.all(query | list)	    If given a query, matches all documents where all documents in the list field match the query. If given a list, matches all documents where all documents in the list field are a member of the given list
Query().field.any(query | list)	    If given a query, matches all documents where at least one document in the list field match the query. If given a list, matches all documents where at least one documents in the list field are a member of the given list
Query().field.one_of(list)	        Match if the field is contained in the list
Logical operations on queries
~ (query)	                        Match documents that don’t match the query
(query1) & (query2)	                Match documents that match both queries
(query1) | (query2)	                Match documents that match at least one of the queries

db.insert_multiple(...)	            Insert multiple documents
>>> db.insert_multiple([
>>>    {'name': 'John', 'age': 22},
>>>    {'name': 'John', 'age': 37}])

Updating data
db.update(operation, ...)	        Update all matching documents with a special operation
>>> from tinydb.operations import delete
>>> db.update(delete('key1'), User.name == 'John')
This will remove the key key1 from all matching documents. TinyDB comes with these operations:

delete(key): delete a key from the document
increment(key): increment the value of a key
decrement(key): decrement the value of a key
add(key, value): add value to the value of a key (also works for strings)
subtract(key, value): subtract value from the value of a key
set(key, value): set key to value

>>> def your_operation(your_arguments):
...     def transform(doc):
...         # do something with the document
...         # ...
...     return transform
...
>>> db.update(your_operation(arguments), query)
>>> db.update_multiple([
...     ({'int': 2}, where('char') == 'a'),
...     ({delete('int'), where('char') == 'b'),
... ])

In some cases you’ll need a mix of both update and insert: upsert.
db.upsert({'name': 'John', 'logged-in': True}, User.name == 'John')


Retrieving data
len(db)	                            Get the number of documents in the database
db.get(query)	                    Get one document matching the query
>>> db.get(User.name == 'John')
{'name': 'John', 'age': 22}
>>> db.get(User.name == 'Bobby')
None
If multiple documents match the query, probably a random one of them will be returned!

db.contains(query)	                Check if the database contains a matching document
>>> db.contains(User.name == 'John')

db.count(query)	                    Get the number of matching documents
>>> db.count(User.name == 'John')
2
